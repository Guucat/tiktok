// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: video.proto

package video_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Video_SaveVideoInfo_FullMethodName         = "/video/SaveVideoInfo"
	Video_GetVideoInfo_FullMethodName          = "/video/GetVideoInfo"
	Video_IncrVideoLikeCount_FullMethodName    = "/video/IncrVideoLikeCount"
	Video_DecrVideoLikeCount_FullMethodName    = "/video/DecrVideoLikeCount"
	Video_IncrVideoCommentCount_FullMethodName = "/video/IncrVideoCommentCount"
	Video_DecrVideoCommentCount_FullMethodName = "/video/DecrVideoCommentCount"
)

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	// 保存视频信息，写作品数到缓存
	SaveVideoInfo(ctx context.Context, in *SaveVideoInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVideoInfo(ctx context.Context, in *VideoInfoRequest, opts ...grpc.CallOption) (*VideoInfo, error)
	IncrVideoLikeCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DecrVideoLikeCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IncrVideoCommentCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DecrVideoCommentCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) SaveVideoInfo(ctx context.Context, in *SaveVideoInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Video_SaveVideoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoInfo(ctx context.Context, in *VideoInfoRequest, opts ...grpc.CallOption) (*VideoInfo, error) {
	out := new(VideoInfo)
	err := c.cc.Invoke(ctx, Video_GetVideoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) IncrVideoLikeCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Video_IncrVideoLikeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) DecrVideoLikeCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Video_DecrVideoLikeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) IncrVideoCommentCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Video_IncrVideoCommentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) DecrVideoCommentCount(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Video_DecrVideoCommentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	// 保存视频信息，写作品数到缓存
	SaveVideoInfo(context.Context, *SaveVideoInfoRequest) (*emptypb.Empty, error)
	GetVideoInfo(context.Context, *VideoInfoRequest) (*VideoInfo, error)
	IncrVideoLikeCount(context.Context, *VideoId) (*emptypb.Empty, error)
	DecrVideoLikeCount(context.Context, *VideoId) (*emptypb.Empty, error)
	IncrVideoCommentCount(context.Context, *VideoId) (*emptypb.Empty, error)
	DecrVideoCommentCount(context.Context, *VideoId) (*emptypb.Empty, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) SaveVideoInfo(context.Context, *SaveVideoInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVideoInfo not implemented")
}
func (UnimplementedVideoServer) GetVideoInfo(context.Context, *VideoInfoRequest) (*VideoInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedVideoServer) IncrVideoLikeCount(context.Context, *VideoId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrVideoLikeCount not implemented")
}
func (UnimplementedVideoServer) DecrVideoLikeCount(context.Context, *VideoId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrVideoLikeCount not implemented")
}
func (UnimplementedVideoServer) IncrVideoCommentCount(context.Context, *VideoId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrVideoCommentCount not implemented")
}
func (UnimplementedVideoServer) DecrVideoCommentCount(context.Context, *VideoId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrVideoCommentCount not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_SaveVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).SaveVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_SaveVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).SaveVideoInfo(ctx, req.(*SaveVideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoInfo(ctx, req.(*VideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_IncrVideoLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).IncrVideoLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_IncrVideoLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).IncrVideoLikeCount(ctx, req.(*VideoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_DecrVideoLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).DecrVideoLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_DecrVideoLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).DecrVideoLikeCount(ctx, req.(*VideoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_IncrVideoCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).IncrVideoCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_IncrVideoCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).IncrVideoCommentCount(ctx, req.(*VideoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_DecrVideoCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).DecrVideoCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_DecrVideoCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).DecrVideoCommentCount(ctx, req.(*VideoId))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveVideoInfo",
			Handler:    _Video_SaveVideoInfo_Handler,
		},
		{
			MethodName: "GetVideoInfo",
			Handler:    _Video_GetVideoInfo_Handler,
		},
		{
			MethodName: "IncrVideoLikeCount",
			Handler:    _Video_IncrVideoLikeCount_Handler,
		},
		{
			MethodName: "DecrVideoLikeCount",
			Handler:    _Video_DecrVideoLikeCount_Handler,
		},
		{
			MethodName: "IncrVideoCommentCount",
			Handler:    _Video_IncrVideoCommentCount_Handler,
		},
		{
			MethodName: "DecrVideoCommentCount",
			Handler:    _Video_DecrVideoCommentCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
